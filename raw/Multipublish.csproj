<Project>

  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />
  
  <PropertyGroup>
    <OutputType>exe</OutputType>
    <TargetFrameworks>net6.0;net7.0;net8.0</TargetFrameworks>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <SelfContained>false</SelfContained>
    <DebugType>embedded</DebugType>
    <RuntimeIdentifiers>win-x86;win-x64;linux-x64;linux-musl-x64;linux-musl-arm64;linux-arm;linux-arm64;linux-bionic-arm64;osx-x64;ios-arm64;android-arm64</RuntimeIdentifiers>
    <UseRidGraph>true</UseRidGraph>
    <PublishSingleFile>false</PublishSingleFile>
    <PublishDir>bin\Publish\$(Configuration)\$(TargetFramework)\$(RuntimeIdentifier)</PublishDir>
  </PropertyGroup>

  <PropertyGroup Condition="'$(RuntimeIdentifier)' == 'linux-x64'">
    <RuntimeName>Debian-Ubuntu-CentOS-Fedora</RuntimeName>
  </PropertyGroup>

  <PropertyGroup Condition="'$(RuntimeIdentifier)' == 'linux-musl-x64'">
    <RuntimeName>Alpine</RuntimeName>
  </PropertyGroup>

  <PropertyGroup Condition="'$(RuntimeIdentifier)' == 'linux-musl-arm64'">
    <RuntimeName>Docker</RuntimeName>
  </PropertyGroup>

  <PropertyGroup Condition="'$(RuntimeIdentifier)' == 'linux-arm'">
    <RuntimeName>RaspberryPiModel2</RuntimeName>
  </PropertyGroup>

  <PropertyGroup Condition="'$(RuntimeIdentifier)' == 'linux-arm64'">
    <RuntimeName>RaspberryPiModel3UbuntuServer</RuntimeName>
  </PropertyGroup>

  <PropertyGroup Condition="'$(RuntimeIdentifier)' == 'linux-bionic-arm64'">
    <RuntimeName>Termux</RuntimeName>
  </PropertyGroup>
  
  <PropertyGroup Condition="'$(RuntimeIdentifier)' == 'osx-x64'">
    <RuntimeName>macOS</RuntimeName>
  </PropertyGroup>
  
  <PropertyGroup Condition="'$(RuntimeIdentifier)' == 'ios-arm64'">
    <RuntimeName>ios</RuntimeName>
  </PropertyGroup>
  
  <PropertyGroup Condition="'$(RuntimeIdentifier)' == 'android-arm64'">
    <RuntimeName>Android</RuntimeName>
  </PropertyGroup>
  
  <PropertyGroup Condition="'$(RuntimeIdentifier)' == 'win-x86'">
    <RuntimeName>Windows32bit</RuntimeName>
  </PropertyGroup>
  
  <PropertyGroup Condition="'$(RuntimeIdentifier)' == 'win-x64'">
    <RuntimeName>Windows64bit</RuntimeName>
  </PropertyGroup>
  
  <PropertyGroup Condition="'$(RuntimeName)' == ''">
    <RuntimeName>$(RuntimeIdentifier)</RuntimeName>
  </PropertyGroup>
  
  <PropertyGroup>
    <PublishDir>bin\Publish\$(Configuration)\$(TargetFramework)\$(RuntimeName)</PublishDir>
  </PropertyGroup>


    <!-- Inline task to generate combinations -->
  <UsingTask TaskName="GenerateCombinations" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
      <ParameterGroup>
        <RuntimeIdentifiers ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
        <TargetFrameworks ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
        <Combinations Output="true" ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
      </ParameterGroup>
      <Task>
        <Code Type="Fragment" Language="cs">
          <![CDATA[
        var combinations = new List<Microsoft.Build.Framework.ITaskItem>();
        foreach (var rid in RuntimeIdentifiers)
        {
          foreach (var tf in TargetFrameworks)
          {
            string combination = $"RuntimeIdentifier={rid.ItemSpec};TargetFramework={tf.ItemSpec}";
            combinations.Add(new Microsoft.Build.Utilities.TaskItem(combination));
          }
        }
        Combinations = combinations.ToArray();
        ]]>
        </Code>
      </Task>
    </UsingTask>


  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" Condition="'$(DefaultTarget)' != 'true'" />

  <Target Name="Publish" Condition="'$(DefaultTarget)' != 'true'">

    <PropertyGroup>
      <RuntimeIdentifiersProperty Condition="'$(RuntimeIdentifier)' != ''">$(RuntimeIdentifier)</RuntimeIdentifiersProperty>
      <RuntimeIdentifiersProperty Condition="'$(RuntimeIdentifiers)' != ''">$(RuntimeIdentifiers)</RuntimeIdentifiersProperty>
      <TargetFrameworksProperty Condition="'$(TargetFramework)' != ''">$(TargetFramework)</TargetFrameworksProperty>
      <TargetFrameworksProperty Condition="'$(TargetFrameworks)' != ''">$(TargetFrameworks)</TargetFrameworksProperty>
    </PropertyGroup>
    
    <ItemGroup>
      <DefinedRuntimeIdentifier Include="$(RuntimeIdentifiersProperty.Split(';'))"/>
      <DefinedTargetFramework Include="$(TargetFrameworksProperty.Split(';'))"/>
    </ItemGroup>


    <GenerateCombinations RuntimeIdentifiers="@(DefinedRuntimeIdentifier)" TargetFrameworks="@(DefinedTargetFramework)">
      <Output TaskParameter="Combinations" ItemName="AllCombinations"/>
    </GenerateCombinations>

    <MSBuild Projects="$(MSBuildProjectFile)" Targets="Restore" Properties="DefaultTarget=true;RuntimeIdentifiers=$(RuntimeIdentifiersProperty);TargetFrameworks=$(TargetFrameworksProperty)" />
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="Clean;Build;Publish" Properties="DefaultTarget=true;%(AllCombinations.Identity)" />
  </Target>

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" Condition="'$(DefaultTarget)' == 'true'" />

</Project>
    
 

    
 
