using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace ConsoleApp.MSTest
{
    [TestClass]
    public class FunctionalTests
    {

        [TestInitialize()]
        public void Startup()
        {

        }

        [TestMethod]
        public void ConsoleProgramMainTest()
        {
            // Create a StringWriter object to capture the console output.
            StringWriter @out = new StringWriter();
            Console.SetOut(@out);

            // Define the inputs that will be used as responses for Console.ReadLine in the test.
            string[] inputs = new string[] { "Somebody" };

            // Set the Console's input to the predefined responses, simulating user input.
            Console.SetIn(new StringReader(String.Join(Environment.NewLine, inputs)));

            // Define the command-line arguments to be used in the test.
            var param = new string[] { "parameter" };

            // Call the main program method with the test parameters.
            Program.Main(param);

            // Capture and store the console output generated by the program.
            string? output = @out.ToString();

            // Define the expected output format for validation.
            string expectedOutput = String.Join(Environment.NewLine, new string[] {
                $@"Please enter a value:",
                $@"Hello, World! {param[0]} {inputs[0]} {ConsoleApp.Library.Class1.Foo()}",
            }) + Environment.NewLine;

            // Assert that the actual output matches the expected output.
            Assert.AreEqual(output, expectedOutput);
        }
    }
}

