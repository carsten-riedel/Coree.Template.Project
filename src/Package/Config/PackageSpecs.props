<Project>

  <!-- Package specs -->

  <ItemGroup>
    <None Include="$(MSBuildProjectDirectory)\Package\Root\**\*" Exclude="$(MSBuildProjectDirectory)\Package\Root\**\**\bin\**;$(MSBuildProjectDirectory)\Package\Root\**\**\obj\**;$(MSBuildProjectDirectory)\Package\Root\**\**\.vs\**" Pack="true" PackagePath="" />
    <None Include="$(MSBuildProjectDirectory)\Package\Config\**\*"  Pack="false" PackagePath="" />
  </ItemGroup>

  <PropertyGroup>
    <PackRelease>false</PackRelease>
    <PublishRelease>false</PublishRelease>
    <IncludeBuildOutput>False</IncludeBuildOutput>
    <IncludeSource>False</IncludeSource>
    <GenerateAssemblyInfo>False</GenerateAssemblyInfo>
    <EnableDefaultItems>False</EnableDefaultItems>
    <IsPackable>true</IsPackable>
    <IsShipping>false</IsShipping>
    <NoWarn>2008;NU5105</NoWarn>
    <NoPackageAnalysis>true</NoPackageAnalysis>
    <SuppressDependenciesWhenPacking>True</SuppressDependenciesWhenPacking>
    <NoWarn>$(NoWarn);NU5128</NoWarn>
    <NoDefaultExcludes>true</NoDefaultExcludes>
    <PackageType>Template</PackageType>
    <!-- Suppress creation of contentFiles directory -->
    <ContentTargetFolders>.\</ContentTargetFolders>
    <PackageOutputPath Condition=" '$(PackageOutputPath)' == '' ">$(MSBuildProjectDirectory)\bin\Package</PackageOutputPath>
  </PropertyGroup>

  <Target Name="DeletePackage" BeforeTargets="GenerateNuspec" Condition="'$(PackageOutputPath)'!=''">
      <Message Text="Delete: $(PackageOutputPath)/$(PackageId).$(PackageVersion).nupkg" Importance="high" />
      <Delete Files="$(PackageOutputPath)/$(PackageId).$(PackageVersion).nupkg" />
  </Target>

    <Target Name="DeletePackage" BeforeTargets="GenerateNuspec" Condition="'$(PackageOutputPath)'!=''">
      <Message Text="Delete: $(PackageOutputPath)/$(PackageId).$(PackageVersion).nupkg" Importance="high" />
      <Delete Files="$(PackageOutputPath)/$(PackageId).$(PackageVersion).nupkg" />
  </Target>

   <PropertyGroup>
    <GitRootPath></GitRootPath>
  </PropertyGroup>

  <Target Name="GitRootDir" BeforeTargets="BeforeBuild">
    <!-- Find the Git root directory -->
    <Exec Command="git rev-parse --show-toplevel 2&gt;&amp;1" IgnoreExitCode="true" ConsoleToMSBuild="true">
      <Output TaskParameter="ExitCode" PropertyName="GitRootExitCode" />
      <Output TaskParameter="ConsoleOutput" PropertyName="GitRootPath" />
    </Exec>

    <!-- Check if the command was successful -->
    <PropertyGroup Condition=" '$(GitRootExitCode)' == '0' ">
      <GitRootPath Condition=" '$(GitRootPath)' != '' ">$(GitRootPath.Trim())</GitRootPath>
    </PropertyGroup>

    <!-- Display the path to the Git root directory -->
    <Message Text="Git root directory path: $(GitRootPath)" Importance="high" Condition=" '$(GitRootExitCode)' == '0' "/>
  </Target>

  
  <Target Name="GitAvailable" BeforeTargets="BeforeBuild">
    <!-- Check if Git is available -->
    <Exec Command="git --version" IgnoreExitCode="true">
      <Output TaskParameter="ExitCode" PropertyName="GitExitCode" />
    </Exec>

    <!-- Set GitAvailable based on the exit code -->
    <PropertyGroup>
      <GitAvailable>false</GitAvailable>
      <GitAvailable Condition=" $(GitExitCode) == 0 ">true</GitAvailable>
    </PropertyGroup>

    <Message Text="Is Git available? $(GitAvailable)" Importance="high" />

  </Target>

  <Target Name="BeforeBuildx" BeforeTargets="BeforeBuild" Condition="'$(Configuration)' == 'Release' And '$(GitAvailable)' == 'true' And '$(GitRootPath)' != ''">
    <Exec Command="git add -A" />
    <!-- <Exec Command="git commit -m &quot;Commit before Release build&quot;" /> -->
    <Exec Command="git diff-index --quiet HEAD || git commit -m &quot;Commit before Release build&quot;" />
    <Exec Command="git tag $(VersionPrefix)" />
    <Exec Command="git rev-parse HEAD" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="GitCommitId" />
    </Exec>
    <Exec Command="git config --get remote.origin.url" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="GitRemoteUrl" />
    </Exec>
    <!-- Output the commit ID -->
    <PropertyGroup>
    <ModifiedGitRemoteUrl>$(GitRemoteUrl.Replace('.git', '/commit/$(GitCommitId)'))</ModifiedGitRemoteUrl>
    </PropertyGroup>
    <Message Text="Latest commit ID: $(GitCommitId)" Importance="high" />
    <Message Text="GitRemoteUrl: $(GitRemoteUrl)" Importance="high" />
    <Message Text="----------: $(ModifiedGitRemoteUrl)" Importance="high" />
  </Target>

  <Target Name="GitPush" AfterTargets="Build" Condition="'$(Configuration)' == 'Release' And '$(GitAvailable)' == 'true' And '$(GitRootPath)' != ''">
    <Exec Command="git push" />
    <Exec Command="git push origin $(VersionPrefix)" />
    <!-- git push -d origin 0.1.8706.38986 -->
  </Target>

  <!--
  <Target Name="GenerateStrings" BeforeTargets="BeforeBuild">
      <PropertyGroup>
          <Start></Start>
          <Start>$(Start)namespace MSBuildVars &#13;&#10;</Start>
          <Start>$(Start){&#13;&#10;</Start>
          <Start>$(Start)&#9;public class MyStrings &#13;&#10;</Start>
          <Start>$(Start)&#9;{&#13;&#10;</Start>
          
          <Content></Content>
          <Content>$(Content)&#9;&#9;public const string Copyright = &quot;$(Copyright)&quot;;&#13;&#10;</Content>
          <Content>$(Content)&#9;&#9;public const string AssemblyVersion = &quot;$(AssemblyVersion)&quot;;&#13;&#10;</Content>
          <Content>$(Content)&#9;&#9;public const string TargetFramework = &quot;$(TargetFramework)&quot;;&#13;&#10;</Content>
          
          <End></End>
          <End>$(End)&#9;}&#13;&#10;</End>
          <End>$(End)}&#13;&#10;</End>
          
          <FinalContent>$([System.String]::Concat($(Start), $(Content), $(End)))</FinalContent>
      </PropertyGroup>
      <WriteLinesToFile
          File="Properties\GeneratedStrings.cs"
          Lines="$(FinalContent)"
          Overwrite="true"
          Encoding="Unicode"/>
  </Target>
  -->
  

</Project>